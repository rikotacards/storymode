import { Gallery } from "@/components/Gallery/Gallery";
import { ProfileButtons } from "@/components/ProfileButtons/ProfileButtons";
import { ProfileHeader } from "@/components/ProfileHeader/ProfileHeader";
import { ProfileHeaderSmall } from "@/components/ProfileHeaderSmall/ProfileHeaderSmall";
import { TabPanel } from "@/components/TabPanel/TabPanel";
import { useAuth } from "@/context/AuthContext";
import { getUidFromUsername, PostFromDbProps } from "@/firebase/db";
import { useGetPostsByUid } from "@/hooks/useGetPostsByUid";
import { useGetUidFromUsername } from "@/hooks/useGetUidFromUsername";
import {
  Button,
  Card,
  CardContent,
  Divider,
  LinearProgress,
  Typography,
  useTheme,
} from "@mui/material";
import Head from "next/head";
import { useRouter } from "next/router";
import React from "react";


interface ProfileProps {
  posts: PostFromDbProps[];
  uname: { uid: string };
  username: string;
  error: { code: number; message: string };
}

export const Profile: React.FC<ProfileProps> = () => {
  const [value, setValue] = React.useState(0);
  const theme = useTheme();
  const router = useRouter();
  const usernameInPath = router.query.username || ""
  const uidFromUsernameRes = useGetUidFromUsername(usernameInPath as string)
  const auth = useAuth();
  const postRes: {
    posts: PostFromDbProps[];
    error: any;
    isLoading: boolean;
} = useGetPostsByUid(uidFromUsernameRes?.data?.uid);
  if (postRes.isLoading) {
    return <LinearProgress style={{ width: "100%" }} />;
  }
  if (!postRes?.posts || uidFromUsernameRes.isLoading || !auth) {
    return (
        <LinearProgress style={{width: '100%'}} />
    );
  }
  if (uidFromUsernameRes.error) {
    return (
      <Card>
        <CardContent>
          <Typography color="error">Something went wrong</Typography>
        </CardContent>
      </Card>
    );
  }

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue);
  };

  const hasNoPosts = !postRes?.posts && uidFromUsernameRes?.data?.uid == auth?.user?.uid;
  const makePost = (
    <Card sx={{ margin: 2 }}>
      <CardContent>
        <Typography>It feels so empty here. Make a post!</Typography>
        <Button
          fullWidth
          sx={{ marginTop: 1 }}
          variant="contained"
          onClick={() => {
            router.push("/add-post");
          }}
        >
          Make a post
        </Button>
      </CardContent>
    </Card>
  );

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProfileHeaderSmall />
      <Divider sx={{ width: "100%" }} />
      {hasNoPosts && makePost}
      {!hasNoPosts && (
        <>
          <ProfileButtons handleChange={handleChange} value={value} />
          <TabPanel value={value} index={0} dir={theme.direction}>
            <Gallery
            posts={postRes.posts}
              mode="column"
            />
          </TabPanel>
          <TabPanel value={value} index={1} dir={theme.direction}>
            <Gallery
              mode="grid"
              posts={postRes.posts}
            />
          </TabPanel>
        </>
      )}
      <div style={{height: '50px'}}/>
    </>
  );
};

export default Profile;
